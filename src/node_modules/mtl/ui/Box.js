var Point = require('./Point');
var Coords = require('./Coords');
var Quad = Coords.Quad;


module.exports = Box;


/**
 * @constructor
 */
function Box(begin, end) {
	this.begin = begin;
	this.end = end;

	this.center = Point.between(begin, end);
	this.base = end.sub(begin);
	this.dim = this.base.abs();
}

Box.fromCSSRect = function (rect, q) {
	var x0, y0, x1, y1;

	if (!q) {
		q = Quad.IV;
	}

	if (q.X > 1) {
		x0 = rect.left;
		x1 = rect.left + rect.width;
	} else {
		x0 = rect.left + rect.width;
		x1 = rect.left;
	}

	if (q.Y > 1) {
		y0 = rect.top + rect.height;
		y1 = rect.top;
	} else {
		y0 = rect.top;
		y1 = rect.top + rect.height;
	}

	return new Box(
		new Point(x0, y0),
		new Point(x1, y1)
	);
};

Box.prototype.getClientRect = function () {
	var base = this.base,
		dim = this.dim,
		leftMost, topMost;

	if (base.x < 0) {
		leftMost = this.end;
	} else {
		leftMost = this.begin;
	}

	if (base.y < 0) {
		topMost = this.end;
	} else {
		topMost = this.begin;
	}

	return {
		left: leftMost.x,
		top: topMost.y,
		width: dim.x,
		height: dim.y
	};
};

Box.prototype.applyToStyle = function (style) {
	var px = 'px',
		rect = this.getClientRect();

	style.top = rect.top + px;
	style.right = null;
	style.bottom = null;
	style.left = rect.left + px;
	style.width = rect.width + px;
	style.height = rect.height + px;
};

Box.prototype.intersects = function (box) {
	var dist = box.center.sub(this.center).abs();
	var maxDist = Point.between(box.dim, this.dim);

	return Coords.getPointQuadrant(maxDist.sub(dist)) === Quad.I;
};

Box.prototype.contains = function (box) {
	var dist = box.center.sub(this.center).abs();
	var maxDist = this.dim.sub(box.dim).div(2);

	return Coords.getPointQuadrant(maxDist.sub(dist)) === Quad.I;
};
