var inherits = require('js/inherits');
var Resource = require('mtl/core/Resource');
var Box = require('./Box');


module.exports = Highlighter;


function Highlighter(container) {
	this.container_ = container;
	this.pool_ = [];

	this.resetPoolIndex_();
	this.onFrame_ = this.onFrame_.bind(this);
	Resource.call(this);
}


inherits(Highlighter, Resource);


Highlighter.prototype.container_ = null;
Highlighter.prototype.frameRequest_ = 0;
Highlighter.prototype.pool_ = null;
Highlighter.prototype.poolIndex_ = -1;

Highlighter.prototype.highlight = function (matches) {
	this.matches_ = matches;

	cancelAnimationFrame(this.frameRequest_);
	this.frameRequest_ = requestAnimationFrame(this.onFrame_);
};

Highlighter.prototype.onFrame_ = function () {
	this.resetPoolIndex_();

	var matches = this.matches_;
	var container = this.container_;
	var elementsProcessed = 0;
	var pool = this.pool_;
	var highlightPadding = 0;

	for (var i = matches.length; i--;) {
		var match = matches[i];
		var boxes = match.boxes;

		for (var j = boxes.length; j--;) {
			var box = boxes[j];
			var el = this.getHighlightElement_();
			var rect = box.getClientRect();

			var style = el.style;

			style.left = rect.left - highlightPadding + 'px';
			style.top = rect.top - highlightPadding + 'px';
			style.width = rect.width + highlightPadding * 2 + 'px';
			style.height = rect.height + highlightPadding * 2 + 'px';

			container.appendChild(el);
			++elementsProcessed;
		}
	}

	var poolLength = pool.length;

	while (elementsProcessed < poolLength) {
		var el = pool[elementsProcessed];

		if (el.parentNode) {
			el.parentNode.removeChild(el);
		}

		++elementsProcessed;
	}
};

Highlighter.prototype.resetPoolIndex_ = function () {
	this.poolIndex_ = 0;
};

Highlighter.prototype.getHighlightElement_ = function () {
	var el = this.pool_[this.poolIndex_];

	if (!el) {
		el = this.pool_[this.poolIndex_] = this.createHighlightElement_();
	}

	++this.poolIndex_;

	return el;
};

Highlighter.prototype.createHighlightElement_ = function () {
	var doc = this.container_.ownerDocument;
	var el = doc.createElement('div');
	var style = el.style;

	style.position = 'absolute';
	style.backgroundColor = 'rgba(0,0,0,0.1)';

	return el;
};

Highlighter.prototype.free = function () {
	cancelAnimationFrame(this.frameRequest_);

	var pool = this.pool_;

	for (var i = pool.length; i--;) {
		var el = pool[i];
		if (el.parentNode) {
			el.parentNode.removeChild(el);
		}
	}

	Highlighter.super_.free.call(this);
};
