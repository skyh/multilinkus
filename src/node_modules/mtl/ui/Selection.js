var inherits = require('js/inherits');
var Resource = require('mtl/core/Resource');

var Box = require('./Box');
var Point = require('./Point');
var Matcher = require('./Matcher');


module.exports = Selection;


var SELECTION_COLORS = {};
SELECTION_COLORS[Matcher.INTERSECTION] = 'rgba(62, 181, 241, 0.5)';
SELECTION_COLORS[Matcher.BOUNDING] = 'rgba(73, 182, 31, 0.1)';


var VK_SPACE = 32;


function Selection(domContainer, matcher, highlighter) {
	Resource.call(this);

	this.onMouseMove_ = this.onMouseMove_.bind(this);
	this.onKeyDown_ = this.onKeyDown_.bind(this);
	this.onKeyUp_ = this.onKeyUp_.bind(this);

	this.container_ = domContainer;

	this.matcher_ = matcher;
	this.highlighter_ = highlighter;

	this.matches_ = [];
}


inherits(Selection, Resource);


Selection.prototype.container_ = null;
Selection.prototype.selectionBoxEl_ = null;
Selection.prototype.innerSelectionBoxEl_ = null;
Selection.prototype.redrawRequest_ = null;

Selection.prototype.startPoint_ = null;
Selection.prototype.endPoint_ = null;

Selection.prototype.panning_ = false;
Selection.prototype.panningBase_ = null;

Selection.prototype.matcher_ = null;
Selection.prototype.matches_ = null;


Selection.prototype.start = function (point) {
	this.startPoint_ = point;
	this.endPoint_ = point;

	this.attachMouse_();
	this.attachKeyboard_();
};

Selection.prototype.end = function () {
	this.detachMouse_();
	this.detachKeyboard_();
	this.highlighter_.highlight([]);
};

Selection.prototype.attachMouse_ = function () {
	var html = this.container_.ownerDocument.documentElement;
	html.addEventListener('mousemove', this.onMouseMove_, true);
};

Selection.prototype.detachMouse_ = function () {
	var html = this.container_.ownerDocument.documentElement;
	html.removeEventListener('mousemove', this.onMouseMove_, true);
};

Selection.prototype.onMouseMove_ = function (event) {
	this.endPoint_ = Point.fromEventClientXY(event);

	if (this.panning_) {
		this.startPoint_ = this.endPoint_.sub(this.panningBase_);
	}

	this.redrawSelectionBox_();
};

Selection.prototype.attachKeyboard_ = function () {
	var html = this.container_.ownerDocument.documentElement;
	html.addEventListener('keydown', this.onKeyDown_, true);
	html.addEventListener('keyup', this.onKeyUp_, true);
};

Selection.prototype.detachKeyboard_ = function () {
	var html = this.container_.ownerDocument.documentElement;
	html.removeEventListener('keydown', this.onKeyDown_, true);
	html.removeEventListener('keyup', this.onKeyUp_, true);
};

Selection.prototype.onKeyDown_ = function (event) {
	if (event.keyCode === VK_SPACE) {
		event.stopPropagation();
		event.preventDefault();

		this.startPan_();
	}
};

Selection.prototype.onKeyUp_ = function (event) {
	if (event.keyCode === VK_SPACE) {
		event.stopPropagation();
		event.preventDefault();

		this.stopPan_();
	}
};

Selection.prototype.startPan_ = function () {
	if (this.panning_) {
		return;
	}

	this.panning_ = true;
	this.panningBase_ = this.endPoint_.sub(this.startPoint_);
};

Selection.prototype.stopPan_ = function () {
	this.panning_ = false;
	this.panningBase_ = null;
};

Selection.prototype.createSelectionBox_ = function () {
	var doc = this.container_.ownerDocument;
	var box = doc.createElement('div');
	var style = box.style;
	var innerBox = doc.createElement('div');
	var innerStyle = innerBox.style;

	innerStyle.position = 'absolute';
	innerStyle.border = '1px solid black';
	innerStyle.left = '0';
	innerStyle.top = '0';
	innerStyle.right = '-1px';
	innerStyle.bottom = '-1px';
	innerStyle.borderRadius = '1px';

	style.position = 'absolute';

	box.appendChild(innerBox);

	return box;
};

Selection.prototype.redrawSelectionBox_ = function () {
	var box = this.getSelectionBox();
	var matcher = this.matcher_;
	var highlighter = this.highlighter_;

	if (!this.selectionBoxEl_) {
		this.selectionBoxEl_ = this.createSelectionBox_();
		this.innerSelectionBoxEl_ = this.selectionBoxEl_.firstChild;
		this.container_.appendChild(this.selectionBoxEl_);
	}

	var selectionStyle = this.selectionBoxEl_.style;
	var innerStyle = this.innerSelectionBoxEl_.style;

	cancelAnimationFrame(this.redrawRequest_);

	var matchingMode = box.base.getTgDir() === 1 ? Matcher.INTERSECTION : Matcher.BOUNDING;
	matchingMode = Matcher.INTERSECTION;

	var matches = this.matches_ = matcher.match(box, matchingMode);
	highlighter.highlight(matches);

	var color = SELECTION_COLORS[matchingMode];

	this.redrawRequest_ = requestAnimationFrame(function () {
		innerStyle.backgroundColor = color;
		box.applyToStyle(selectionStyle);
	});
};

Selection.prototype.free = function () {
	this.matcher_.release();
	this.highlighter_.release();

	if (this.selectionBoxEl_) {
		this.container_.removeChild(this.selectionBoxEl_);
	}

	cancelAnimationFrame(this.redrawRequest_);

	Selection.super_.free.call(this);
};

Selection.prototype.getSelectionBox = function () {
	return new Box(this.startPoint_, this.endPoint_);
};

Selection.prototype.getSelectedLinks = function () {
	return this.matches_.map(function (match) {
		return match.element.href;
	});
};

